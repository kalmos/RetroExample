###
# #
###

string(TOUPPER ${CMAKE_CXX_COMPILER_ID} CMAKE_CXX_COMPILER_ID)
set (CPP_COMPILER ${CMAKE_CXX_COMPILER_ID}) 
# Include default compiler options

include(${CMAKE_SOURCE_DIR}/cfg/${CMAKE_CXX_COMPILER_ID}.cconf)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${${CMAKE_CXX_COMPILER_ID}_FLAGS}" CACHE STRING "Compiler flag" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_DEBUG}"	 CACHE STRING "Compiler flag debug" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_RELEASE}" CACHE STRING "Compiler flag release" FORCE)
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_RELWITHDEBINFO}" CACHE STRING "Compiler flag relase with debug info" FORCE)
set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_MINSIZEREL}" CACHE STRING "Compiler flag mini size release" FORCE)
set(USEDCOMPILER ${CMAKE_CXX_COMPILER_ID})

STRING(REGEX REPLACE "." "_" DEFINE_OS_VERSION_NUMBER ${CMAKE_SYSTEM_VERSION})
STRING(REGEX REPLACE "." "_" DEFINE_OS_ARCH_TYPE ${CMAKE_SYSTEM_PROCESSOR})

set(FULL_OS_NAME "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}-${CMAKE_SYSTEM_PROCESSOR}")
add_definitions(-DOS_NAME="${CMAKE_SYSTEM_NAME}"
				-DOS_VERSION_NUMBER="${CMAKE_SYSTEM_VERSION}"
				-DOS_ARCH_TYPE="${CMAKE_SYSTEM_PROCESSOR}"
				-DFULL_OS_NAME="${FULL_OS_NAME}"
				-DPROJECT_NAME="${PROJECT_NAME}"
				-D${CMAKE_SYSTEM_NAME}
				-DVERSION_${DEFINE_OS_VERSION_NUMBER}
				-DARCH${DEFINE_OS_ARCH_TYPE})

set(CUSTOM_LIB_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}/externs/lib/${FULL_OS_NAME}/")
set(CUSTOM_BIN_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/")

if (EXISTS "${CUSTOM_LIB_FOLDER}")
else (EXISTS "${CUSTOM_LIB_FOLDER}")
file(MAKE_DIRECTORY "${CUSTOM_LIB_FOLDER}")
file(MAKE_DIRECTORY "${CUSTOM_LIB_FOLDER}/Debug")
endif (EXISTS "${CUSTOM_LIB_FOLDER}")

link_directories("${CUSTOM_LIB_FOLDER}")

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/externs/Frameworks/SDL.framework")

	if (NOT DEFINED USE_SDL_FRAMEWORKS)
		set (USE_SDL_FRAMEWORKS true CACHE BOOL "if SDL.Framework is present" FORCE)
		include_directories("${CMAKE_CURRENT_SOURCE_DIR}/externs/Frameworks/SDL.framework/")
	endif(NOT DEFINED USE_SDL_FRAMEWORKS)
	message ("You need to put RetroEngine lib in")
	message ("${CUSTOM_LIB_FOLDER}")
	message ("No check are done except the one made by the compiler\n")
	message ("You need to put RetroEngine header in")
	message ("${CMAKE_SOURCE_DIR}/externs/include/")
	message ("No check are done except the one made by the compiler\n")

else (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/externs/Frameworks/SDL.framework")

	message ("You need to put RetroEngine and SLD lib in")
	message ("${CUSTOM_LIB_FOLDER}")
	message ("No check are done except the one made by the compiler\n")
	message ("You need to put RetroEngine and SLD header in")
	message ("${CMAKE_SOURCE_DIR}/externs/include/")
	message ("No check are done except the one made by the compiler\n")

endif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/externs/Frameworks/SDL.framework")

#----------------------------------------
#-- INPUT/OUTPUT PATHS
#----------------------------------------
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(LIBRARY_OUTPUT_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)

 # verifie que le generateur supporte les multiples configuration
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DISTRIB  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DISTRIB ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DISTRIB ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/)
	set(LIBRARY_OUTPUT_PATH_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(LIBRARY_OUTPUT_PATH_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
	set(LIBRARY_OUTPUT_PATH_DISTRIB ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/)
else(CMAKE_CONFIGURATION_TYPES)
	if(NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
	endif(NOT CMAKE_BUILD_TYPE)
endif(CMAKE_CONFIGURATION_TYPES)
if(CMAKE_BUILD_TYPE MATCHES "")
		set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif(CMAKE_BUILD_TYPE MATCHES "")
#-----------------------------------------------------------------------------
# Macros

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/externs/include/")
# Set subdirectories to compile

include ("${CMAKE_CURRENT_SOURCE_DIR}/Rule/AllExample.cmake")